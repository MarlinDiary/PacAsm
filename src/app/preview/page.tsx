'use client'

import { notFound } from 'next/navigation'
import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from '@/components/ui/resizable'
import CodeEditor from '@/components/CodeEditor'
import { useState, useCallback } from 'react'
import { ARMAssembler, AssemblerOptions } from '@/lib/assembler'
import { createDisassembler, DisassemblerOptions } from '@/lib/disassembler'

export default function PreviewPage() {
  // Only allow access in development mode
  if (process.env.NODE_ENV !== 'development') {
    notFound()
  }

  const [assemblyCode, setAssemblyCode] = useState(`mov r0, #42`)

  const [assemblyOutput, setAssemblyOutput] = useState('')
  const [disassemblyInput, setDisassemblyInput] = useState('2a 00 a0 e3 0a 10 80 e2')
  const [disassemblyOutput, setDisassemblyOutput] = useState('')
  const [isAssembling, setIsAssembling] = useState(false)
  const [isDisassembling, setIsDisassembling] = useState(false)
  const [assemblerOptions, setAssemblerOptions] = useState<AssemblerOptions>({
    baseAddress: 0x1000
  })
  const [disassemblerOptions, setDisassemblerOptions] = useState<DisassemblerOptions>({
    detail: true
  })

     const handleAssemble = useCallback(async () => {
     if (!assemblyCode.trim()) {
       setAssemblyOutput('Error: No assembly code provided')
       return
     }

     setIsAssembling(true)
     setAssemblyOutput('Assembling...')

     try {
       const assembler = new ARMAssembler(assemblerOptions)
       await assembler.initialize()

       const result = await assembler.assemble(assemblyCode)
       const stats = assembler.getStats(result)
       const hexBytes = assembler.bytesToHex(result.mc)

      const output = [
        '‚úÖ Assembly successful!',
        '',
        `üìä Statistics:`,
        `  Instructions: ${stats.instructionCount}`,
        `  Bytes: ${stats.byteCount}`,
                 `  Base Address: 0x${assemblerOptions.baseAddress?.toString(16)}`,
         '',
         `üî¢ Machine Code (hex):`,
         hexBytes,
         '',
         `üìã Raw bytes:`,
         `[${Array.from(result.mc).join(', ')}]`,
      ].join('\n')

      setAssemblyOutput(output)
      // Auto-populate disassembly input with the generated bytes
      setDisassemblyInput(hexBytes)

             assembler.destroy()
     } catch (error) {
       setAssemblyOutput(`‚ùå Assembly failed:\n${error}`)
     } finally {
       setIsAssembling(false)
     }
   }, [assemblyCode, assemblerOptions])

  const handleDisassemble = useCallback(async () => {
    if (!disassemblyInput.trim()) {
      setDisassemblyOutput('Error: No machine code provided')
      return
    }

    setIsDisassembling(true)
    setDisassemblyOutput('Disassembling...')

    try {
      const disassembler = createDisassembler(disassemblerOptions)
      await disassembler.initialize()

      const bytes = disassembler.hexToBytes(disassemblyInput)
      const results = await disassembler.disassemble(bytes, 0x1000)
      const stats = disassembler.getStats(results)
      const formatted = disassembler.formatInstructions(results)

      const branchCount = results.filter(r => disassembler.isBranch(r)).length

      const output = [
        '‚úÖ Disassembly successful!',
        '',
        `üìä Statistics:`,
        `  Instructions: ${stats.instructionCount}`,
        `  Total bytes: ${stats.totalBytes}`,
        `  Address range: 0x${stats.addressRange.start.toString(16)} - 0x${stats.addressRange.end.toString(16)}`,
        `  Branch instructions: ${branchCount}`,
        '',
                 `üìù Disassembled code:`,
         formatted,
      ].join('\n')

      setDisassemblyOutput(output)

      disassembler.destroy()
    } catch (error) {
      setDisassemblyOutput(`‚ùå Disassembly failed:\n${error}`)
    } finally {
      setIsDisassembling(false)
    }
  }, [disassemblyInput, disassemblerOptions])

  const loadExampleAssembly = (example: string) => {
    const examples = {
      basic: `mov r0, #42
add r1, r0, #10
sub r2, r1, r0`,
      
      memory: `ldr r0, [r1]
str r2, [r3, #4]
ldrb r4, [r5, r6]`,
      
      branches: `cmp r0, #0
beq end
mov r1, #1
end:
bx lr`,
      
             simple: `mov r0, #5
add r1, r0
bx lr`
    }
    setAssemblyCode(examples[example as keyof typeof examples] || examples.basic)
  }

  return (
    <div className="h-screen w-full p-4">
      <div className="mb-4">
        <h1 className="text-2xl font-bold">ARM Assembler & Disassembler Test</h1>
        <p className="text-neutral-600">Testing keystone.js and capstone.js TypeScript wrappers</p>
      </div>
      
      <div className="h-[calc(100vh-8rem)] w-full border-0">
        <ResizablePanelGroup direction="horizontal" className="h-full w-full">
          {/* Left panel - Assembly */}
          <ResizablePanel defaultSize={50} minSize={30}>
            <div className="h-full flex flex-col bg-neutral-50">
              <div className="p-3 border-b border-neutral-200 flex-shrink-0">
                                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-lg font-medium">ARM Assembly</h3>
                  <div className="text-xs text-neutral-500">ARM 32-bit</div>
                </div>
                <div className="flex gap-1 mb-2">
                  <button 
                    onClick={() => loadExampleAssembly('basic')}
                    className="text-xs bg-blue-100 hover:bg-blue-200 px-2 py-1 rounded"
                  >
                    Basic
                  </button>
                  <button 
                    onClick={() => loadExampleAssembly('memory')}
                    className="text-xs bg-blue-100 hover:bg-blue-200 px-2 py-1 rounded"
                  >
                    Memory
                  </button>
                  <button 
                    onClick={() => loadExampleAssembly('branches')}
                    className="text-xs bg-blue-100 hover:bg-blue-200 px-2 py-1 rounded"
                  >
                    Branches
                  </button>
                  <button 
                    onClick={() => loadExampleAssembly('simple')}
                    className="text-xs bg-blue-100 hover:bg-blue-200 px-2 py-1 rounded"
                  >
                    Simple
                  </button>
                </div>
                <button 
                  onClick={handleAssemble}
                  disabled={isAssembling}
                  className="w-full bg-green-600 hover:bg-green-700 disabled:bg-green-400 text-white px-4 py-2 rounded"
                >
                  {isAssembling ? 'Assembling...' : 'üîß Assemble'}
                </button>
              </div>
              <div className="flex-1 p-2 min-h-0">
                <CodeEditor
                  value={assemblyCode}
                  onChange={(value) => setAssemblyCode(value || '')}
                  height="100%"
                  className="border border-neutral-200 rounded"
                />
              </div>
            </div>
          </ResizablePanel>
          
          <ResizableHandle withHandle />
          
          {/* Right side with two vertical panels */}
          <ResizablePanel defaultSize={50}>
            <ResizablePanelGroup direction="vertical" className="h-full">
              {/* Assembly Output Panel */}
              <ResizablePanel defaultSize={50} minSize={30}>
                <div className="h-full flex flex-col bg-green-50">
                  <div className="p-3 border-b border-neutral-200 flex-shrink-0">
                    <h3 className="text-lg font-medium">Assembly Output</h3>
                  </div>
                  <div className="flex-1 p-2 min-h-0">
                    <pre className="h-full w-full bg-white border border-neutral-200 rounded p-2 text-xs font-mono overflow-auto whitespace-pre-wrap">
                      {assemblyOutput || 'Click "Assemble" to see machine code output...'}
                    </pre>
                  </div>
                </div>
              </ResizablePanel>
              
              <ResizableHandle withHandle />
              
              {/* Disassembly Panel */}
              <ResizablePanel defaultSize={50} minSize={30}>
                <div className="h-full flex flex-col bg-blue-50">
                  <div className="p-3 border-b border-neutral-200 flex-shrink-0">
                                        <div className="flex items-center justify-between mb-2">
                      <h3 className="text-lg font-medium">Disassembly</h3>
                      <div className="text-xs text-neutral-500">ARM 32-bit</div>
                    </div>
                    <input
                      type="text"
                      value={disassemblyInput}
                      onChange={(e) => setDisassemblyInput(e.target.value)}
                      placeholder="Enter hex bytes (e.g., 2a 00 a0 e3)"
                      className="w-full p-2 border border-neutral-300 rounded text-sm mb-2"
                    />
                    <button 
                      onClick={handleDisassemble}
                      disabled={isDisassembling}
                      className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-4 py-2 rounded"
                    >
                      {isDisassembling ? 'Disassembling...' : 'üîç Disassemble'}
                    </button>
                  </div>
                  <div className="flex-1 p-2 min-h-0">
                    <pre className="h-full w-full bg-white border border-neutral-200 rounded p-2 text-xs font-mono overflow-auto whitespace-pre-wrap">
                      {disassemblyOutput || 'Enter hex bytes and click "Disassemble" to see assembly code...'}
                    </pre>
                  </div>
                </div>
              </ResizablePanel>
            </ResizablePanelGroup>
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
    </div>
  )
} 